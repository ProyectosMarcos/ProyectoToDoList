//! Clase Item
/* ¬°Lleg√≥ la hora de darle funcionalidad a tu lista de tareas!
Para empezar, seleccionar√°s los elementos del "input" principal. Luego, continuar√°s con el "boton-agregar" y el "container". Para eso, usar√°s querySelector() y guardar√°s estas referencias en tres Variables distintas.
Al finalizar, el proyecto deber√≠a funcionar as√≠: 

Trabajar Con Clases:
Para empezar, cre√° la Clase Item. √âsta posee en su constructor el llamado a un m√©todo propio: crearDiv.

Pista:  ¬øC√≥mo Debe Ser El div?
Deber√°s crear un div que contenga un input. Este formar√° parte de la lista de tareas a realizar.
El constructor de la Clase Item recibir√° como par√°metro el valor del input de la tarea a agregar; por ejemplo, "Lavar los platos". El m√©todo crearDiv recibir√° este mismo valor.

Luego, defin√≠ el m√©todo crearDiv (dentro de la Clase Item) y pas√° como par√°metro la nueva tarea.

Solucion: El c√≥digo del constructor deber√≠a quedarte as√≠:
constructor(nuevaTarea)¬†{
¬†¬†¬†¬†¬†¬†¬†¬†this.crearDiv(nuevaTarea)
}

üìõ Revis√° este proceso. Luego, pas√° a la siguiente secci√≥n para aprender el m√©todo que te permitir√° crear tareas.
=================================================================================================================================
*/

/* M√©todo crearDiv (Parte 1)
Este m√©todo te permitir√° agregar tareas a tu lista. Para eso, segu√≠ estas recomendaciones:
    Dentro del m√©todo crearDiv, us√° createElement para crear un input de tipo "text".

    ‚ö†Ô∏è Importante: Guard√° la referencia a este elemento en la Variable inputItem.

    Establec√© la Propiedad disabled de la Variable inputItem con el valor true.
    Us√° el m√©todo classList.add para agregar la clase css item-input a la Variable inputItem.

    Tom√° el par√°metro del constructor para asignarle un valor a la variable inputItem.
    Por √∫ltimo, us√° createElement para crear un nuevo div. Guard√° la referencia a este elemento en una Variable y agregale la clase css item.
 
 ===============================================================================================================
 
 Trabajar Con Botones

Ahora, crear√°s los botones para editar y remover los input de la lista.
Bot√≥n "EDITAR" ("üîí ")

    Cre√° el bot√≥n para editar el input de la tarea agregada. Guard√° la referencia en una Variable llamada botonEditar.
    Us√° innerHTML para insertar su √≠cono dentro del botonEditar.

  Solucion: innerHTML= "<i class='fas fa-lock'></i>"

  Por √∫ltimo, us√° classList.add para agregar la Clase boton-editar a tu bot√≥n.


Bot√≥n "REMOVER" ("üóë ")Ô∏è
    Repet√≠ los mismos pasos para crear el bot√≥n "Remover". Guard√° su referencia en una Variable llamada botonRemover.


    Pista: Us√° innerHTML para insertar su √≠cono dentro del botonRemover.
           innerHTML= "<i class='fas fa-trash'></i>"
 
  üõéÔ∏è Record√°: agreg√° la Clase boton-remover a tu bot√≥n.
  
  Agregar Elementos A La Lista

  Ahora, agregar√°s el div, input y botones a la lista.

    Primero, para agregar el input y los botones al div, deber√°s usar appendChild.

    Luego, con la misma Funci√≥n, deber√°s agregar el div (que ya contiene los otros elementos) a la Variable container.

üìõ Si todo funciona bien, pas√° a la siguiente secci√≥n.

=======================================================================================================================================0


M√©todo crearDiv (Parte 2)

En esta secci√≥n definir√°s el comportamiento de los botones dentro del m√©todo crearDiv.
Para eso, defin√≠ el comportamiento del botonEditar para que el usuario pueda hacer click y modificar el input de la tarea agregada.

Adem√°s, al presionar el bot√≥n, el √≠cono debe cambiar a un candado abierto ("üîì"): "<i class='fas fa-lock-open'></i>". Al volver a presionar, debe cerrarse otra vez y deshabilitar la edici√≥n.

Pista:  C√≥mo Generar Este Comportamiento
Podemos generar este comportamiento negando (!) el valor boolean de input.disabled. De esta manera, cada vez que el usuario haga click en el candado, se usar√° ese valor para generar un comportamiento o el otro (üîí = !üîí).

Luego, defin√≠ el comportamiento del botonRemoverpara que el usuario pueda hacer click y se remueva el div creado inicialmente.

¬°Ya escribiste la Clase Item y el m√©todo crearDiv!
Pas√° a la siguiente secci√≥n para verificar el input.
===========================================================================================================================================


Verificar El Input

Ahora, deber√°s definir una Funci√≥n llamada chequearInput para comprobar si el input de la nueva tarea tiene un valor. Si es as√≠, debe instanciar un Objeto de tipo Item y pasarle al constructor ese valor.

‚ö†Ô∏è Importante: la Funci√≥n chequearInput debe ir por fuera de la Clase Item.

Adem√°s, una vez que el usuario agregue una tarea a la lista, el input debe volver a quedar vac√≠o.

Por √∫ltimo, el botonAgregar debe llamar a la Funci√≥n chequearInput cada vez que el usuario haga click.

üìõ Si todo funciona bien, pas√° a la siguiente secci√≥n para definir los detalles finales a tu proyecto.

===================================================================================================================
Retoques Finales

¬°Ya est√°s cerca de terminar tu proyecto!
En esta secci√≥n, agregar√°s los detalles finales: mejorar√°s la est√©tica de los botones y de los input.

Al finalizar, tu proyecto deber√≠a verse as√≠:


Paso A Paso
Modificar Los input
En tu hoja de estilos, hac√© referencia a la Clase .item-input y dale el siguiente formato:


    Una altura y un ancho de 50px.
    Un padding de 0px hacia arriba y abajo y de 20px hacia los costados.
    Un borde s√≥lido y blanco de 1px.
    Un border-radius de 10px.
    Un tama√±o tipogr√°fico de 18px.
    Un color de texto blanco.
    Remov√© el fondo con la Propiedad background: none.
    Elimin√° el contorno de los input nuevos.


    Modificar El Espaciado
    Para generar m√°s espacio entre los √≠tems, agregale un margen inferior de 10px a la Clase .item.


    Modificar El Bot√≥n "Editar"

Hac√© referencia a la Clase .boton-editar y dale el siguiente formato:

    Un margen de 0px arriba y abajo y de 5px hacia los costados.
    Remov√© el borde que viene por default con la Propiedad border: none.
    Remov√© el fondo con la Propiedad background: none.
    Asign√° al texto el color #62d0ff, un tama√±o 1.4rem y una tipograf√≠a Montserrat, sans-serif.

    Modificar El Bot√≥n "Remover"
    Hac√© referencia a la Clase .boton-remover y dale el siguiente formato:

    Una altura y un ancho de 50px.
    Un margen de 0px arriba y abajo y de 5px hacia los costados.
    Remov√© el borde.
    Un border-radius de 10px.
    Asign√° el color rgb(255, 6, 46) al fondo y un tama√±o tipogr√°fico de 20px.




Conclusi√≥n
¬°Felicitaciones!
¬°Terminaste tu primera lista de tareas! A disfrutarlo as√≠:



Este ejercicio te permiti√≥ integrar todos los conceptos trabajados hasta el momento y crear una herramienta √∫til para vos y para las personas que quieras.
üîç Pod√©s leer m√°s sobre experiencia de usuario (para esta herramienta u otras que vayas haciendo) en el siguiente link.
üõéÔ∏è No te olvides de compartirlo en Discord ni de agregarlo a tu Portfolio.
 */

// Clase Item
class Item {
  constructor(nuevaTarea) {
    this.crearDiv(nuevaTarea);
  }

  // M√©todo para crear un nuevo div con la tarea
  crearDiv(nuevaTarea) {
    // Crear un nuevo div
    const div = document.createElement('div');
    div.classList.add('item');

    // Crear un nuevo input
    const inputItem = document.createElement('input');
    inputItem.type = 'text';
    inputItem.classList.add('item-input');
    inputItem.value = nuevaTarea;
    inputItem.disabled = true;

    // Crear botones para editar y remover
    const botonEditar = document.createElement('button');
    botonEditar.classList.add('boton-editar');
    botonEditar.innerHTML = '<i class="fas fa-lock"></i>';

    const botonRemover = document.createElement('button');
    botonRemover.classList.add('boton-remover');
    botonRemover.innerHTML = '<i class="fas fa-trash"></i>';

    // Agregar elementos al div
    div.appendChild(inputItem);
    div.appendChild(botonEditar);
    div.appendChild(botonRemover);

    // Agregar el nuevo div al container
    container.appendChild(div);

    // Llamar a la funci√≥n para agregar eventos
    this.agregarEventos(botonEditar, botonRemover, inputItem);
  }

  // M√©todo para agregar eventos a los botones
  agregarEventos(botonEditar, botonRemover, inputItem) {
    // Agregar evento de clic al bot√≥n "EDITAR"
    botonEditar.addEventListener('click', () => {
      // Cambiar el estado del input y el √≠cono del bot√≥n
      inputItem.disabled = !inputItem.disabled;
      botonEditar.innerHTML = inputItem.disabled
        ? '<i class="fas fa-lock"></i>'
        : '<i class="fas fa-lock-open"></i>';
    });

    // Agregar evento de clic al bot√≥n "REMOVER"
    botonRemover.addEventListener('click', () => {
      // Remover el div
      const div = botonRemover.parentNode;
      div.remove();
    });
  }
}

// Funci√≥n para comprobar si el input tiene valor y crear un nuevo Item
function chequearInput() {
  const nuevaTarea = inputPrincipal.value.trim();

  if (nuevaTarea !== '') {
    // Instanciar un nuevo Item
    new Item(nuevaTarea);

    // Limpiar el input
    inputPrincipal.value = '';
  }
}

// Referenciar el input principal, el bot√≥n agregar y el container
const inputPrincipal = document.querySelector('.input');
const botonAgregar = document.querySelector('.boton-agregar');
const container = document.querySelector('.container');

// Agregar evento de clic al bot√≥n "AGREGAR"
botonAgregar.addEventListener('click', chequearInput);
